// Generated by view binder compiler. Do not edit!
package ie.wit.donationx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.NumberPicker;
import android.widget.ProgressBar;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import ie.wit.donationx.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityReviewerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final RadioButton Direct;

  @NonNull
  public final RadioButton PayPal;

  @NonNull
  public final TextView amount;

  @NonNull
  public final NumberPicker amountPicker;

  @NonNull
  public final EditText editTextTextPersonName;

  @NonNull
  public final EditText paymentAmount;

  @NonNull
  public final RadioGroup paymentMethod;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final Button reviewButton;

  @NonNull
  public final TextView reviewSubtitle;

  @NonNull
  public final TextView reviewTitle;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView textView2;

  @NonNull
  public final TextView total;

  @NonNull
  public final TextView totalSoFar;

  private ActivityReviewerBinding(@NonNull ConstraintLayout rootView, @NonNull RadioButton Direct,
      @NonNull RadioButton PayPal, @NonNull TextView amount, @NonNull NumberPicker amountPicker,
      @NonNull EditText editTextTextPersonName, @NonNull EditText paymentAmount,
      @NonNull RadioGroup paymentMethod, @NonNull ProgressBar progressBar,
      @NonNull Button reviewButton, @NonNull TextView reviewSubtitle, @NonNull TextView reviewTitle,
      @NonNull TextView textView, @NonNull TextView textView2, @NonNull TextView total,
      @NonNull TextView totalSoFar) {
    this.rootView = rootView;
    this.Direct = Direct;
    this.PayPal = PayPal;
    this.amount = amount;
    this.amountPicker = amountPicker;
    this.editTextTextPersonName = editTextTextPersonName;
    this.paymentAmount = paymentAmount;
    this.paymentMethod = paymentMethod;
    this.progressBar = progressBar;
    this.reviewButton = reviewButton;
    this.reviewSubtitle = reviewSubtitle;
    this.reviewTitle = reviewTitle;
    this.textView = textView;
    this.textView2 = textView2;
    this.total = total;
    this.totalSoFar = totalSoFar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityReviewerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityReviewerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_reviewer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityReviewerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Direct;
      RadioButton Direct = rootView.findViewById(id);
      if (Direct == null) {
        break missingId;
      }

      id = R.id.PayPal;
      RadioButton PayPal = rootView.findViewById(id);
      if (PayPal == null) {
        break missingId;
      }

      id = R.id.amount;
      TextView amount = rootView.findViewById(id);
      if (amount == null) {
        break missingId;
      }

      id = R.id.amountPicker;
      NumberPicker amountPicker = rootView.findViewById(id);
      if (amountPicker == null) {
        break missingId;
      }

      id = R.id.editTextTextPersonName;
      EditText editTextTextPersonName = rootView.findViewById(id);
      if (editTextTextPersonName == null) {
        break missingId;
      }

      id = R.id.paymentAmount;
      EditText paymentAmount = rootView.findViewById(id);
      if (paymentAmount == null) {
        break missingId;
      }

      id = R.id.paymentMethod;
      RadioGroup paymentMethod = rootView.findViewById(id);
      if (paymentMethod == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = rootView.findViewById(id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.reviewButton;
      Button reviewButton = rootView.findViewById(id);
      if (reviewButton == null) {
        break missingId;
      }

      id = R.id.reviewSubtitle;
      TextView reviewSubtitle = rootView.findViewById(id);
      if (reviewSubtitle == null) {
        break missingId;
      }

      id = R.id.reviewTitle;
      TextView reviewTitle = rootView.findViewById(id);
      if (reviewTitle == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = rootView.findViewById(id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.textView2;
      TextView textView2 = rootView.findViewById(id);
      if (textView2 == null) {
        break missingId;
      }

      id = R.id.total;
      TextView total = rootView.findViewById(id);
      if (total == null) {
        break missingId;
      }

      id = R.id.totalSoFar;
      TextView totalSoFar = rootView.findViewById(id);
      if (totalSoFar == null) {
        break missingId;
      }

      return new ActivityReviewerBinding((ConstraintLayout) rootView, Direct, PayPal, amount,
          amountPicker, editTextTextPersonName, paymentAmount, paymentMethod, progressBar,
          reviewButton, reviewSubtitle, reviewTitle, textView, textView2, total, totalSoFar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
